import requests
import time

API_KEY = "AIzaSyCy2qRJaqSJ7TsZFB3u23Bk_EAFNrnMs28"

places = [
    "黒部ダム", "富山市ガラス美術館", "瑞龍寺", "雪の大谷", "富岩運河環水公園", "越中五箇山相倉集落", "富山県美術館", 
    "称名滝", "みくりが池", "高岡大仏", "砺波チューリップ公園", "黒部峡谷トロッコ列車", "雨晴海岸", "富山城", "恋人の聖地海王丸パーク", 
    "富山市役所展望塔", "スターバックスコーヒー富山環水公園店", "富山市ファミリーパーク", "氷見漁港場外市場ひみ番屋街", "魚津水族館", 
    "ほたるいか海上観光集合場所", "氷見市潮風ギャラリー藤子不二雄Aアートコレクション", "海王丸パーク", "ほたるいかミュージアム", 
    "ますのすし本舗源ますのすしミュージアム", "松川遊覧船乗り場（松川茶屋）", "新湊大橋", "（株）池田屋安兵衛商店健康膳薬都", "道の駅雨晴", 
    "富山ガラス工房", "きときと市場とやマルシェGOSHU", "北前船回船問屋森家", "チューリップ四季彩館", "井波別院瑞泉寺", "日枝神社", 
    "富山市科学博物館", "富山縣護國神社", "菅沼合掌造り集落（南砺市菅沼重要伝統的建造物群保存地区）", "富山城址公園", "満天の湯富山店", 
    "富岩水上ライン", "おとぎの森館", "高岡古城公園", "散居村展望台", "富山県中央植物園", "秋水美術館", "金太郎温泉日帰り温泉カルナの館", 
    "諏訪町本通り", "富山県立山カルデラ砂防博物館", "富山市郷土博物館", "富山港展望台", "高岡古城公園動物園", "立山", "富山市民俗民芸村民俗資料館", 
    "富山市佐藤記念美術館", "高岡おとぎの森公園", "高岡市万葉歴史館", "ミラージュランド", "庄川峡", "宇奈月駅", "あさひ舟川「春の四重奏」", 
    "弥陀ヶ原", "県民公園太閤山ランド", "岩瀬の古い町並み", "庄川温泉郷", "となみチューリップ公園東門", "黒部平", "富山県水墨美術館", "（有）営農ワイエムアイ", 
    "桂樹舎・和紙文庫", "海の駅蜃気楼", "日石寺", "勝興寺", "八重津浜海水浴場", "高志の国文学館", "魚津埋没林博物館", "射水市大島絵本館", 
    "閑乗寺公園", "富山県立イタイイタイ病資料館", "氷見あいやまガーデン", "松川公園", "牛岳温泉スキー場", "梅かまミュージアムU-mei館", 
    "ミュゼふくおかカメラ館", "呉羽山公園", "朝日山公園", "高岡御車山会館", "氷見市海浜植物園シーサイドパーク", "高岡城跡", "まんがロード", 
    "高天原温泉", "黒部川電気記念館", "剱岳", "山町筋重要伝統的建造物群保存地区", "高岡市美術館", "富山二上山", "薬師岳"
]

# まずGeocoding APIで緯度経度を取得
def get_latlng(place):
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={place}&key={API_KEY}"
    response = requests.get(url).json()
    if response["status"] == "OK" and len(response["results"]) > 0:
        location = response["results"][0]["geometry"]["location"]
        return location["lat"], location["lng"]
    else:
        print(f"Geocoding API エラー: {place} の座標が取得できませんでした。")
        return None, None

coords = []
for place in places:
    lat, lng = get_latlng(place)
    if lat is not None:
        coords.append((lat, lng))
    else:
        coords.append((0.0, 0.0))  # 取得失敗時の代替値
    time.sleep(0.1)  # API制限回避のため少し待つ

# Distance Matrix APIで移動時間を取得（最大25地点ずつ分割してリクエスト）
def chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i+n]

n = len(coords)
times = [[-1]*n for _ in range(n)]

MAX_ORIGINS = 10
MAX_DESTINATIONS = 10

for i_block, origins in enumerate(chunks(coords, MAX_ORIGINS)):
    for j_block, destinations in enumerate(chunks(coords, MAX_DESTINATIONS)):
        origins_str = "|".join(f"{lat},{lng}" for lat, lng in origins)
        destinations_str = "|".join(f"{lat},{lng}" for lat, lng in destinations)
        url = f"https://maps.googleapis.com/maps/api/distancematrix/json?origins={origins_str}&destinations={destinations_str}&mode=driving&key={API_KEY}"

        response = requests.get(url).json()
        if response["status"] != "OK":
            print(f"APIリクエスト失敗: status={response['status']}, message={response.get('error_message', '')}")
            continue
        for oi, row in enumerate(response["rows"]):
            for di, element in enumerate(row["elements"]):
                if element["status"] == "OK":
                    times[i_block*MAX_ORIGINS+oi][j_block*MAX_DESTINATIONS+di] = element["duration"]["value"]
        time.sleep(0.1)  # API制限回避

# timesが97x97の秒単位の移動時間行列になります
print("移動時間行列:")
for row in times:
    print(" ".join(list(map(str, row))))
